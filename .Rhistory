use_mit_license()
library(usethis)
use_mit_license()
check()
library(devtools)
check()
use_pipe()
document()
document()
library(dplyr)
document()
use_r("say")
use_r("phrases")
load_all()
say()
document()
?say
use_readme_rmd()
install.packages("ohwhaley")
install.packages("ohwhaley")
install("ohwhaley")
install(ohwhaley)
library(ohwhaley)
library(ohwhaley)
vignette("dplyr")
use_vignette("ohwhaley")
build_vignettes()
document()
vignette("ohwhaley")
library(testthat)
use_testthat()
use_test("say")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
expect_equal(2*2,4)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
say("hello")
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
install.packages("r-pkgs")
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
library(cli)
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
install.packages("cli")
install.packages("cli")
remove.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
library(testthat)
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
library(cli)
install.packages("cli")
library(cli)
library("cli")
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
remotes::install_github("r-lib/cli")
library(devtools)
remove.packages(devtools)
remove.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("cli")
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
library(testthat)
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
library(testthat)
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
library(tidyverse)
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
library(testthat)
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
install.packages("cli")
library(cli)
remove.packages("cli")
install.packages("cli")
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
pkgload::pkg_desc(path)
pkgload::pkg_desc(path)
pkgload::pkg_desc(path)
remotes::install_github("r-lib/cli")
remove.packages("cli")
update.packages("cli")
library("cli")
version()
version
version
library("cli")
library(testthat)
library(testthat)
install.packages("testthat")
library(devtools)
library(devtool)
install.packages("devtools")
library(devtools)
library(testthat)
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
#' This is from oxygen skeleton from code
#'
#' @param what character string to be printed, if NULL it returns the default one. Help files are generated by this....
#'
#' @return Whaled shaped message
#' @export
#'
#' @examples say("Hi falks")
say <- function(what){
#Defining the whale ASCII
whale = "\n            ------ \n           %s \n            ------ \n               \\\   \n                \\\  \n                 \\\
.-'
'--./ /     _.---.
'-,  (__..-`       \\
\\          .     |
`,.__.   ,__.--/
'._/_.'___.-`
"
#If what isn't supplied...
if(missing(what)){
what <- phrases %>% sample(size = 1)
}
#Combining message and whale together with sprintf ("%s" in the whale ASCII is replaced by "what")
out <- sprintf(whale, #Speech bubble
what) #User specified message
#Return whale message
message(out)
}
phrases <-  c(
"You're whale-come!",
"How are you? I'm whaley good!",
"I'm having a whale of a time!",
"Whale, whale, whale...look who's here!",
"Gee...this is over-whalming!",
"Everything whale be alright!",
"Get whale soon!",
"Whale done! This looks great!",
"What do you call a pod of noisy whales?        An ORCASTRA!"
)
test_that("Output is of correct format",{
expect_length(say(), 0) #Returns something with a length of 0
expect_null(say()) #Returns null
expect_invisible(say()) #Returns invisibly
expect_message(say()) #Returns a message
})
document()
rm(list = c("say"))
document()
load_all()
say()
create_from_github("https://github.com/sandunsilva01/testrepo2.git",destdir = getwd())
getwd()
library(devtools)
library(devtools)
create_from_github("https://github.com/sandunsilva01/testrepo2.git")
use_github_action_check_full()
use_github_action_check_release()
usethis::git_sitrep()git_sitrep()
